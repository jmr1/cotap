
#ifndef COTAP_ERROR_HPP_INCLUDED
#define COTAP_ERROR_HPP_INCLUDED

// Copyright Janusz Rupar 2012
//
// Distributed under the Boost Software License, Version 1.0. 
//
// Boost Software License - Version 1.0 - August 17th, 2003
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#include <boost/mpl/not_equal_to.hpp>
#include <boost/mpl/modulus.hpp>
#include <boost/mpl/greater.hpp>
#include <boost/mpl/less.hpp>
#include <boost/mpl/times.hpp>

#include <boost/mpl/alias.hpp>



namespace prime
{
    template <typename ValueDiv>
    struct DIVISION_BY_ZERO_ERROR :
        mpl::not_equal_to< mpl::int_<0>, 
                           ValueDiv 
        >::type
    {};

    template <typename ValueDiv>
    struct DIVISOR_LESS_THAN_2_ERROR :
        mpl::greater< ValueDiv, 
                      mpl::int_<1> 
        >::type
    {};

    template <typename Value>
    struct DIVIDENT_LESS_THAN_2_ERROR :
        mpl::greater< Value, 
                      mpl::int_<1> 
        >::type
    {};

    template <typename Value, typename ValueDiv>
    struct DIVIDER_GREATER_OR_EQUAL_TO_DIVIDENT_ERROR :
        mpl::eval_if< mpl::greater< Value, mpl::int_<2> >,
                      mpl::less< ValueDiv, Value >,
                      mpl::true_ // not raising error here because 
                                 // dividents less than or equal to 2 
                                 // are caught by DIVIDENT_LESS_THAN_2_ERROR 
        >::type
    {};

    template <typename Value>
    struct START_VALUE_EVEN_NUMBER_ERROR :
        mpl::not_equal_to< mpl::int_<0>, 
                           mpl::modulus< Value, 
                                         mpl::int_<2> 
                                         > 
        >::type
    {};

    template <typename Step>
    struct STEP_ODD_NUMBER_ERROR :
        mpl::equal_to< mpl::int_<0>, 
                       mpl::modulus< Step, 
                                     mpl::int_<2> 
                                     > 
        >::type
    {};

}

#endif // COTAP_ERROR_HPP_INCLUDED