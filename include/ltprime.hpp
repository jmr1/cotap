
#ifndef COTAP_LTPRIME_HPP_INCLUDED
#define COTAP_LTPRIME_HPP_INCLUDED

// Copyright Janusz Rupar 2012
//
// Distributed under the Boost Software License, Version 1.0. 
//
// Boost Software License - Version 1.0 - August 17th, 2003
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#include <boost/mpl/filter_view.hpp>

#include <boost/mpl/not_equal_to.hpp>
#include <boost/mpl/modulus.hpp>
#include <boost/mpl/greater.hpp>
#include <boost/mpl/less.hpp>
#include <boost/mpl/times.hpp>
#include <boost/mpl/divides.hpp>

#include <boost/mpl/alias.hpp>

#include "range_c_ex2.hpp"
#include "error.hpp"

#include "prime.hpp"



namespace ltprime
{
    template <typename Value, typename ValueDiv = mpl::int_<100> >
    struct has_zero :
        mpl::eval_if< mpl::greater<ValueDiv, Value >,
                      mpl::false_,
                      mpl::eval_if< mpl::less< mpl::modulus< Value, ValueDiv >, 
                                               mpl::divides< ValueDiv, mpl::int_<10> > 
                                               >,
                                    mpl::true_,
                                    typename has_zero< Value, 
                                                       mpl::times< ValueDiv, mpl::int_<10> > 
                                                       >
                      >
        >::type
    {};

    template <typename Value, typename ValueDiv = mpl::int_<100> >
    struct is_trunc_prime :
        mpl::eval_if< mpl::equal_to< Value, mpl::modulus< Value, ValueDiv > >,
                      mpl::true_,
                      mpl::eval_if< typename prime::is_prime< mpl::modulus< Value, ValueDiv > >,
                      typename is_trunc_prime< Value, mpl::times< ValueDiv, mpl::int_<10> > >,
                                    mpl::false_
                                    >
                      >::type
    {};

    template <typename Value>
    struct is_ltprime :
        mpl::eval_if< mpl::greater< Value, mpl::int_<100> >,
                      mpl::eval_if< typename has_zero<Value>, 
                                    mpl::false_,
                                    mpl::eval_if< typename prime::is_prime< Value >,
                                                  typename is_trunc_prime< Value >,
                                                  mpl::false_>
                                 >,
                      prime::is_prime<Value>
        >::type
    {};

    template <typename T, T StartValue = 13, T EndValue = 203, T StepStart = 4>
    struct ltprime_gen_c :
        mpl::filter_view<
            typename mpl::range_c_ex2<int, StartValue, EndValue, StepStart, mpl::minus<mpl::int_<10>, mpl::_ >, mpl::plus<mpl::_, mpl::_ > >,
            is_ltprime< mpl::_ >
        >::type
    {

    };
}

#endif // COTAP_LTPRIME_HPP_INCLUDED